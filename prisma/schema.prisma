generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Authors {
  AuthorID         Int                @id
  Salary           Int?
  Users            Users              @relation(fields: [AuthorID], references: [UserID], onUpdate: Restrict, map: "Authors_ibfk_1")
  AuthorsWebtoons  AuthorsWebtoons[]
  EpisodesDialogue EpisodesDialogue[]
}

model AuthorsWebtoons {
  AuthorWebtoonID Int       @id
  WebtoonID       Int?
  AuthorID        Int?
  Webtoons        Webtoons? @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Cascade, onUpdate: Restrict, map: "AuthorsWebtoons_ibfk_1")
  Authors         Authors?  @relation(fields: [AuthorID], references: [AuthorID], onDelete: Restrict, onUpdate: Restrict, map: "AuthorsWebtoons_ibfk_2")

  @@index([AuthorID], map: "AuthorID")
  @@index([WebtoonID], map: "WebtoonID")
}

model Comments {
  CommentID       Int             @id
  EpisodeID       Int?
  ReaderID        Int?
  CommentText     String?         @db.VarChar(255)
  Timestamp       DateTime        @default(now()) @db.Timestamp(0)
  ParentCommentID Int?
  Episodes        Episodes?       @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "Comments_ibfk_1")
  Readers         Readers?        @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "Comments_ibfk_2")
  Comments        Comments?       @relation("CommentsToComments", fields: [ParentCommentID], references: [CommentID], onDelete: Cascade, onUpdate: Restrict, map: "Comments_ibfk_3")
  other_Comments  Comments[]      @relation("CommentsToComments")
  CommentsLikes   CommentsLikes[]

  @@index([EpisodeID], map: "EpisodeID")
  @@index([ReaderID], map: "ReaderID")
  @@index([ParentCommentID], map: "ParentCommentID")
}

model CommentsLikes {
  LikeID    Int                     @id
  ReaderID  Int?
  CommentID Int?
  LikeType  CommentsLikes_LikeType?
  Readers   Readers?                @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "CommentsLikes_ibfk_1")
  Comments  Comments?               @relation(fields: [CommentID], references: [CommentID], onDelete: Cascade, onUpdate: Restrict, map: "CommentsLikes_ibfk_2")

  @@unique([ReaderID, CommentID], map: "ReaderID")
  @@index([CommentID], map: "CommentID")
}

model EpisodeAvgRating {
  EpisodeAvgRatingID Int       @id
  EpisodeID          Int?
  Rating             Decimal?  @db.Decimal(3, 1)
  Episodes           Episodes? @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "EpisodeAvgRating_ibfk_1")

  @@index([EpisodeID], map: "EpisodeID")
}

model EpisodeRating {
  EpisodeRatingID Int       @id
  EpisodeID       Int?
  ReaderID        Int?
  Rating          Int?      @db.TinyInt
  Episodes        Episodes? @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "EpisodeRating_ibfk_1")
  Readers         Readers?  @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "EpisodeRating_ibfk_2")

  @@index([EpisodeID], map: "EpisodeID")
  @@index([ReaderID], map: "ReaderID")
}

model Episodes {
  EpisodeID        Int                @id
  WebtoonID        Int?
  Title            String?            @db.VarChar(255)
  ReleaseDate      DateTime?          @db.Date
  ThumbnailURL     String?            @db.VarChar(255)
  EpisodeIndex     Int?
  Comments         Comments[]
  EpisodeAvgRating EpisodeAvgRating[]
  EpisodeRating    EpisodeRating[]
  Webtoons         Webtoons?          @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Cascade, onUpdate: Restrict, map: "Episodes_ibfk_1")
  EpisodesDialogue EpisodesDialogue[]
  EpisodesImage    EpisodesImage[]
  EpisodesMedia    EpisodesMedia[]
  ReaderBookmark   ReaderBookmark[]
  Reading          Reading[]

  @@unique([WebtoonID, EpisodeIndex], map: "WebtoonID")
}

model EpisodesDialogue {
  DialogueID   Int       @id
  EpisodeID    Int?
  AuthorID     Int?
  DialogueText String?   @db.VarChar(255)
  Timestamp    DateTime  @default(now()) @db.Timestamp(0)
  Episodes     Episodes? @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "EpisodesDialogue_ibfk_1")
  Authors      Authors?  @relation(fields: [AuthorID], references: [AuthorID], onDelete: Restrict, onUpdate: Restrict, map: "EpisodesDialogue_ibfk_2")

  @@index([AuthorID], map: "AuthorID")
  @@index([EpisodeID], map: "EpisodeID")
}

model EpisodesImage {
  EpisodeImageID Int       @id
  EpisodeID      Int?
  CutNumber      Int?
  ImageURL       String?   @db.VarChar(255)
  Episodes       Episodes? @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "EpisodesImage_ibfk_1")

  @@unique([EpisodeID, CutNumber], map: "EpisodeID")
}

model EpisodesMedia {
  EpisodeMediaID Int       @id
  EpisodeID      Int?
  MediaURL       String?   @db.VarChar(255)
  Episodes       Episodes? @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "EpisodesMedia_ibfk_1")

  @@index([EpisodeID], map: "EpisodeID")
}

model Genres {
  GenreID       Int             @id
  Name          String?         @db.VarChar(255)
  Description   String?         @db.VarChar(255)
  WebtoonGenres WebtoonGenres[]
}

model Notice {
  NoticeID       Int              @id
  Title          String?          @db.VarChar(255)
  Content        String?          @db.VarChar(255)
  PostedDate     DateTime?        @db.Date
  AdminID        Int?
  IsActive       Boolean?
  Administrator  Administrator?   @relation(fields: [AdminID], references: [AdministratorID], onDelete: Restrict, onUpdate: Restrict, map: "Notice_ibfk_1")
  UserNoticeRead UserNoticeRead[]

  @@index([AdminID], map: "AdminID")
}

model ReaderBookmark {
  ReaderBookmarkID Int       @id
  ReaderID         Int?
  WebtoonID        Int?
  EpisodeID        Int?
  Readers          Readers?  @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "ReaderBookmark_ibfk_1")
  Webtoons         Webtoons? @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Restrict, onUpdate: Restrict, map: "ReaderBookmark_ibfk_2")
  Episodes         Episodes? @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "ReaderBookmark_ibfk_3")

  @@unique([ReaderID, WebtoonID], map: "ReaderID")
  @@index([EpisodeID], map: "EpisodeID")
  @@index([WebtoonID], map: "WebtoonID")
}

model ReaderCookiePurchases {
  ReaderCookiePurchaseID Int       @id @default(autoincrement())
  ReaderID               Int?
  Amount                 Int?
  Date                   DateTime? @db.Date
  ReaderPaymentMethodID  Int?
  Readers                Readers?  @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "ReaderCookiePurchases_ibfk_1")

  @@index([ReaderID], map: "ReaderID")
}

model ReaderCookieUse {
  ReaderCookieUseID Int       @id
  ReaderID          Int?
  Amount            Int?
  Date              DateTime? @db.Date
  Readers           Readers?  @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "ReaderCookieUse_ibfk_1")

  @@index([ReaderID], map: "ReaderID")
}

model ReaderPaymentMethods {
  ReaderPaymentMethodID Int      @id
  ReaderID              Int?
  PaymentMethodDetails  String?  @db.VarChar(255)
  Readers               Readers? @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "ReaderPaymentMethods_ibfk_1")

  @@index([ReaderID], map: "ReaderID")
}

model ReaderSearch {
  ReaderSearchID Int       @id
  ReaderID       Int?
  CreationDate   DateTime? @db.DateTime(0)
  SearchKeyword  String?   @db.VarChar(255)
  Readers        Readers?  @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "ReaderSearch_ibfk_1")

  @@index([ReaderID], map: "ReaderID")
}

model Readers {
  ReaderID              Int                     @id
  CookieAmount          Int?
  Comments              Comments[]
  CommentsLikes         CommentsLikes[]
  EpisodeRating         EpisodeRating[]
  ReaderBookmark        ReaderBookmark[]
  ReaderCookiePurchases ReaderCookiePurchases[]
  ReaderCookieUse       ReaderCookieUse[]
  ReaderPaymentMethods  ReaderPaymentMethods[]
  ReaderSearch          ReaderSearch[]
  Users                 Users                   @relation(fields: [ReaderID], references: [UserID], onUpdate: Restrict, map: "Readers_ibfk_1")
  Reading               Reading[]
  Subscriptions         Subscriptions[]
  UserNoticeRead        UserNoticeRead[]
}

model Reading {
  ReadingID Int       @id
  ReaderID  Int?
  EpisodeID Int?
  ReadDate  DateTime? @db.Date
  Readers   Readers?  @relation(fields: [ReaderID], references: [ReaderID], onDelete: Restrict, onUpdate: Restrict, map: "Reading_ibfk_1")
  Episodes  Episodes? @relation(fields: [EpisodeID], references: [EpisodeID], onDelete: Cascade, onUpdate: Restrict, map: "Reading_ibfk_2")

  @@index([EpisodeID], map: "EpisodeID")
  @@index([ReaderID], map: "ReaderID")
}

model Subscriptions {
  ReaderID         Int
  WebtoonID        Int
  SubscriptionDate DateTime? @db.Date
  Readers          Readers   @relation(fields: [ReaderID], references: [ReaderID], onUpdate: Restrict, map: "Subscriptions_ibfk_1")
  Webtoons         Webtoons  @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Cascade, onUpdate: Restrict, map: "Subscriptions_ibfk_2")

  @@id([ReaderID, WebtoonID])
  @@index([WebtoonID], map: "WebtoonID")
}

model Tags {
  TagID          Int           @id
  TagName        String?       @db.VarChar(255)
  TagDescription String?       @db.VarChar(255)
  WebtoonTags    WebtoonTags[]
}

model UserNoticeRead {
  ReaderID Int
  NoticeID Int
  Readers  Readers @relation(fields: [ReaderID], references: [ReaderID], onUpdate: Restrict, map: "UserNoticeRead_ibfk_1")
  Notice   Notice  @relation(fields: [NoticeID], references: [NoticeID], onUpdate: Restrict, map: "UserNoticeRead_ibfk_2")

  @@id([ReaderID, NoticeID])
  @@index([NoticeID], map: "NoticeID")
}

model UserTokens {
  Token        String    @id @db.VarChar(255)
  UserID       Int?
  Expiration   DateTime? @db.DateTime(0)
  CreationDate DateTime? @db.DateTime(0)
  Users        Users?    @relation(fields: [UserID], references: [UserID], onDelete: Restrict, onUpdate: Restrict, map: "UserTokens_ibfk_1")

  @@index([UserID], map: "UserID")
}

model Users {
  UserID        Int            @id
  Username      String?        @db.VarChar(255)
  Email         String?        @db.VarChar(255)
  PasswordHash  String?        @db.VarChar(255)
  Gender        String?        @db.VarChar(50)
  IsActive      Boolean?
  DateOfBirth   DateTime?      @db.Date
  JoinDate      DateTime?      @db.Date
  Administrator Administrator?
  Authors       Authors?
  Readers       Readers?
  UserTokens    UserTokens[]
}

model WebtoonAvgRating {
  WebtoonAvgRatingID Int       @id
  WebtoonID          Int?
  Rating             Decimal?  @db.Decimal(3, 1)
  Webtoons           Webtoons? @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Cascade, onUpdate: Restrict, map: "WebtoonAvgRating_ibfk_1")

  @@index([WebtoonID], map: "WebtoonID")
}

model WebtoonGenres {
  WebtoonID Int
  GenreID   Int
  Webtoons  Webtoons @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Cascade, onUpdate: Restrict, map: "WebtoonGenres_ibfk_1")
  Genres    Genres   @relation(fields: [GenreID], references: [GenreID], onUpdate: Restrict, map: "WebtoonGenres_ibfk_2")

  @@id([WebtoonID, GenreID])
  @@index([GenreID], map: "GenreID")
}

model WebtoonStatus {
  WebtoonID Int                   @id
  Status    WebtoonStatus_Status?
  Webtoons  Webtoons              @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Cascade, onUpdate: Restrict, map: "WebtoonStatus_ibfk_1")
}

model WebtoonTags {
  WebtoonTagID Int       @id
  WebtoonID    Int?
  TagID        Int?
  Webtoons     Webtoons? @relation(fields: [WebtoonID], references: [WebtoonID], onDelete: Cascade, onUpdate: Restrict, map: "WebtoonTags_ibfk_1")
  Tags         Tags?     @relation(fields: [TagID], references: [TagID], onDelete: Restrict, onUpdate: Restrict, map: "WebtoonTags_ibfk_2")

  @@index([TagID], map: "TagID")
  @@index([WebtoonID], map: "WebtoonID")
}

model Webtoons {
  WebtoonID        Int                @id
  Title            String?            @db.VarChar(255)
  AuthorID         Int?
  PublishDate      DateTime?          @db.Date
  ThumbnailURL     String?            @db.VarChar(255)
  PublishDay       Int?
  AuthorsWebtoons  AuthorsWebtoons[]
  Episodes         Episodes[]
  ReaderBookmark   ReaderBookmark[]
  Subscriptions    Subscriptions[]
  WebtoonAvgRating WebtoonAvgRating[]
  WebtoonGenres    WebtoonGenres[]
  WebtoonStatus    WebtoonStatus?
  WebtoonTags      WebtoonTags[]
}

model PromotionEvent {
  event_id             Int       @id
  start_date           DateTime? @db.Date
  end_date             DateTime? @db.Date
  event_title          String?   @db.VarChar(255)
  cookie_discount_rate Int?
}

model Administrator {
  AdministratorID Int      @id
  Salary          Int?
  Level           Int?
  Users           Users    @relation(fields: [AdministratorID], references: [UserID], onUpdate: Restrict, map: "Administrator_ibfk_1")
  Notice          Notice[]
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view CommentsWithUserInfo {
  CommentID       Int      @id
  EpisodeID       Int?
  Username        String?  @db.VarChar(255)
  CommentText     String?  @db.VarChar(255)
  Timestamp       DateTime @default(now()) @db.Timestamp(0)
  ParentCommentID Int?
}

enum WebtoonStatus_Status {
  Ongoing
  Completed
}

enum CommentsLikes_LikeType {
  Good
  Bad
}
